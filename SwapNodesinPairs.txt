/*
Swap Nodes in Pairs

Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode newHead, temp;
        newHead = new ListNode(0);
        ListNode curr = newHead;
        temp = head;
        while (temp != null && temp.next != null) {
            ListNode t = temp.next.next;
            temp.next.next = temp;
            curr.next = temp.next;
            curr = curr.next.next;
            temp = t;
        }
        curr.next = temp;
        return newHead.next;
    }
}