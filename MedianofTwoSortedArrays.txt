/*
Median of Two Sorted Arrays

There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5

*/

public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len1 = nums1.length;
        int len2 = nums2.length;
        int total = len1 + len2;
        int k = total / 2 + 1;
        int x = findkth(nums1, nums2, 0, len1 - 1, 0, len2 - 1, k);
        if (total % 2 == 0) {
            int y = findkth(nums1, nums2, 0, len1 - 1, 0, len2 - 1, k - 1);
            return (x + y) * 0.5;
        }
        else
            return x;
    }
    
    private int findkth (int[] nums1, int[] nums2, int begin1, int end1, int begin2, int end2, int k) {
        if (begin1 > end1)
            return nums2[begin2 + k - 1];
        if (begin2 > end2)
            return nums1[begin1 + k - 1];
        int mid1 = begin1 + (end1 - begin1) / 2;
        int mid2 = begin2 + (end2 - begin2) / 2;
        int x = mid1 - begin1 + 1;
        int y = mid2 - begin2 + 1;
        if (nums1[mid1] <= nums2[mid2]) {
            if (k < x + y)
                return findkth(nums1, nums2, begin1, end1, begin2, mid2 - 1, k);
            else
                return findkth(nums1, nums2, mid1 + 1, end1, begin2, end2, k - x);
        } else {
            if (k < x + y)
                return findkth(nums1, nums2, begin1, mid1 - 1, begin2, end2, k);
            else
                return findkth(nums1, nums2, begin1, end1, mid2 + 1, end2, k - y);
        }
    }
}